/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2011, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Instrument: RITA-II @ PSI with full CAMEA secondary instrument
*
* %Identification 
* Written by: <a href="mailto:jakob.lass@nbi.ku.dk">Jakob Lass</a>
* Date: 2018
* Origin: <a href="http://www.risoe.dk">Ris&oslash; (Denmark)</a>
* Original script: <a href="mailto:udby@fys.ku.dk">Linda Udby</a>  and <a href="mailto:pkwi@fysik.dtu.dk">Peter Willendrup</a>
* Release: McStas 1.12c
* 
* %INSTRUMENT_SITE: PSI
*
* RITA type triple-axis spectrometer (TAS)
*
* %Description
* ??
* EXAMPLES
* ??
* %Parameters
* INPUT PARAMETERS:
*******************************************
* Spectrometer settings
*******************************************
* EI:   Incoming neutron energy. Also used to set range of energy monitors [meV]
* A3:   Sample rotation angle [deg]
* A4:   Sample take-off angle [deg]
* SAMPLE: 0 for Vanadium, 1 for Phonon_simple, 2 for Powder1
* %End
*******************************************************************************/

DEFINE INSTRUMENT PSI_CAMEA(slitwidth=0.01, virtual_slit_d=0.001,SourceE=4.1, DeltaSourceE=2,EI=4.1,A3=0,A4=-90,SAMPLE=3, string file_name="EGECE_13WaveLmax1_geometry.dat.txt",RV_mono_Bool=0.5,RH_mono_Bool=0.5,Be_filter=1,old_mono=0,sampleHeight=0.01,sampleRadius=0.005,samplePosY=0.00)

DECLARE
%{
double slitheight=0.05;
double guide_start=1.5411;
double smallaxis_x_factor5=0.001019;
double smallaxis_y_factor5=0.00193;
double startx5=0.034973;
double starty5=0.11782;
double smallaxis_x_factor3=0.0012272;
double smallaxis_y_factor3=0.11055;
double startx3=0.070026;
double starty3=0.14691;
double lengthfrac2=0.35765;
double smallaxis_x_factor1=0.16453;
double smallaxis_y_factor1=0.093264;
double startx1=0.051571;
double starty1=0.14841;
double length1=13.2556;
double sizeX=0.03;
double sizeY=0.05;
double divreq_x=2;
double divreq_y=2;
double sample_dist=0.03;
double mod_x=0.08;
double mod_y=0.135;
double minimalist_factor=1;
double Mod_sample=35.6;
double closest_element=1.5;
double length4=0.13;
double length5=4.6;
double minlength1=6;
double minlength3=1;
double minlength5=1;
double R05=0.99;
double Qc5=0.0217;
double alpha5=6.07;
double m5=3.5;
double W5=0.003;
double max_smallaxis_x5=0.25;
double max_smallaxis_y5=0.25;
double R03=0.99;
double Qc3=0.0217;
double alpha3=6.07;
double m3=3.5;
double W3=0.003;
double max_smallaxis_x3=0.25;
double max_smallaxis_y3=0.25;
double R02=0.99;
double Qc2=0.0217;
double alpha2=6.07;
double m2=6;
double W2=0.003;
double channels2=1;
double R01=0.99;
double Qc1=0.0217;
double alpha1=6.07;
double m1=3.5;
double W1=0.003;
double max_smallaxis_x1=0.25;
double max_smallaxis_y1=0.25;
double WaveMin=1;
double WaveMax=10;
/********************************************************************************************/
double thetaA1;
double thetaA2;
double R_mono;
double lmin;
double lmax;
/********************************************************************************************/
double u;
double Lambda0;
double dLambda;
double var_divreq_x;
double var_divreq_y;
double x_div;
double y_div;
double startxpoint[8][3][3];
double startypoint[8][3][3];
double startXdirec[8][3];
double startYdirec[8][3];
double startXposition[8][3];
double startYposition[8][3];
double dist;
double position;
double focus_e;
double elength;
double width;
double height;
double curve_small_radius2;
double curveXcenter2[3];
double DeltaA2;
double DeltaB2;
double sinrot3;
double cosrot3;
double rot_factor_g2;
double X1[5];
double X2[5];
double Z1[5];
double Z2[5];
double a[5];
double b[5];
double tmp_double;
double dx_circ;
double dy_circ;
double dr_circ;
double D_circ;
double x1_circ;
double x2_circ;
double y1_circ;
double y2_circ;
double sign_dy;
double k_circ;
double x_solution[2];
double y_solution[2];
double smallaxis_x5;
double smallaxis_y5;
double Linx5;
double Liny5;
double Loutx5;
double Louty5;
double tmp_k;
double tmp_L1;
double tmp_L2;
double tmp_c;
double tmp_b;
double tmp_w1;
double tmp_w2;
double tmp_L;
double endx5;
double endy5;
double endPoint5;
double startx4;
double starty4;
double endx4;
double endy4;
double endPoint4;
double smallaxis_x3;
double smallaxis_y3;
double Linx3;
double Liny3;
double Loutx3;
double Louty3;
double endx3;
double endy3;
double length3;
double minlengthneeded;
double tmp_length;
double endPoint3;
double startx2;
double starty2;
double endx2;
double endy2;
double curve_radius2;
double rot2;
double var_divreq_x_protected;
double var_divreq_y_protected;
double length2;
double endPoint2;
double smallaxis_x1;
double smallaxis_y1;
double Linx1;
double Liny1;
double Loutx1;
double Louty1;
double endx1;
double endy1;
double endPoint1;
double rot_factor_g2;
int flag;
int i;
int part;
int n_check;
int los_logic;
int n1;
int n2;
int line;
int los_tmp[5];
int n_check;
int los_logic;
int los_check;
int ii;
int los_logic_single[7][8];
FILE *fp;
int scat = 0;
// Filter parameters 
double OUTFILTER_THICK;

// Analyser material parameters
double ana_mosaic_h;
double ana_mosaic_v;
double ana_q = 1.87325;
double ana_r0 = 0.8; 
double DA;    // d-spacing analyser
//Analyser geometrical parameters 
double ana_l[9];
//double ana_w=0.01;

// Declarations for 'Coarse Collimator' at the PSD detector surface 
int EntrySlit;
int ExitSlit;
int AnaBlade;
double BladeThickness = 0.0001;// detector coll after 2006, from drawings
double WindowSize = 0.025;
double BladeLength = 0.179;// detector coll after 2006, from drawings
double BladeHeight = 0.272;// detector coll after 2006, from drawings
double FirstWindowSizeL;
double FirstWindowSizeR;
double deltaL;
int coarse;

// Analyzer positions
double z_an1[8];
double y_an1[8];
double thet_an1[8];
int Ana1=0;
double z_an2[8];
double y_an2[8];
double thet_an2[8];
int Ana2=0;
double z_an3[8];
double y_an3[8];
double thet_an3[8];
int Ana3=0;

double pixelstart[8];
double pixelstop[8];

double z_an4[8];
double y_an4[8];
double thet_an4[8];
int Ana4=0;

double z_an5[8];
double y_an5[8];
double thet_an5[8];
int Ana5=0;

double z_an6[8];
double y_an6[8];
double thet_an6[8];
int Ana6=0;

double z_an7[8];
double y_an7[8];
double thet_an7[8];
int Ana7=0;

double z_an8[8];
double y_an8[8];
double thet_an8[8];
int Ana8=0;

// Detector parameters 
double ang_1[8];
double ang_2[8];
double detx_1[8];
double detz_1[8];
double detx_2[8];
double detz_2[8];
double dety_1;
double dety_2;
double det_cen;
int i;

double A3_val;
double A4_val;
double sourceDivergence;

double ANA_MOS_H=60;
double ANA_MOS_V=60;
double AW1=0.012;
double AW2=0.012;
double AW3=0.0125;
double AW4=0.013;
double AW5=0.0135;
double AW6=0.014;
double AW7=0.015;
double AW8=0.016;
double RADCOL_height=0.2;
double RADCOL_length=0.3;
double RADCOL_chan=20;
double RADCOL_radius=0.55;
double RADCOL_foilthick=0.0003;
double RADCOL_thetamin=-5;
double RADCOL_thetamax=5;
int RADCOL_flag=1;
int OUTFILTER=1;

double DET_cen=1.2;
double DET_rad=0.0063;
double DET_len=1.0;
double ana_l_add=0;

int REP=1;
int VIRTUALOUT=0;
int VIRTUALIN=0;
int verbose=0;


double RV_mono;
double RH_mono;

%}
INITIALIZE
%{
/********************************************************************************************/
thetaA1= asin(1.0/(0.1106*sqrt(EI)*2.0*3.355));
thetaA2=2.0*thetaA1;
R_mono=sqrt( ( 2.0*1.6*1.6+2.0*1.6*1.6*cos(thetaA2)) )/2.0/sqrt(sin(thetaA2)*sin(thetaA2))*2;
thetaA2=thetaA2*RAD2DEG;
thetaA1=thetaA1*RAD2DEG;
lmin=1.0/0.1106/sqrt(SourceE+DeltaSourceE/2.0);
lmax=1.0/0.1106/sqrt(SourceE-DeltaSourceE/2.0);
printf("\n lmin: %f      lmax: %f \n",lmin,lmax);
printf("\n E0: %f      E0max: %f E0min %f \n",SourceE,SourceE+DeltaSourceE/2.0,SourceE-DeltaSourceE/2.0);
/********************************************************************************************/

dLambda = 0.5*(WaveMax - WaveMin);
Lambda0 = dLambda+WaveMin;

var_divreq_x = divreq_x;
var_divreq_y = divreq_y;

u=1e-4;


endPoint1 = Mod_sample - sample_dist;

endy1 = sizeY + 2*sample_dist*tan(divreq_y*DEG2RAD);


endx1 = sizeX + 2*sample_dist*tan(divreq_x*DEG2RAD);


var_divreq_x = atan(endx1*tan(var_divreq_x*DEG2RAD)/startx1)*RAD2DEG;
var_divreq_y = atan(endy1*tan(var_divreq_y*DEG2RAD)/starty1)*RAD2DEG;



if (startx1 > endx1) {
smallaxis_x1 = 0.5*startx1+ 0.5*smallaxis_x_factor1*(max_smallaxis_x1-startx1);
}
else {
smallaxis_x1 = 0.5*endx1+ 0.5*smallaxis_x_factor1*(max_smallaxis_x1-endx1);
}
if (starty1 > endy1) {
smallaxis_y1 = 0.5*starty1+ 0.5*smallaxis_y_factor1*(max_smallaxis_y1-starty1);
}
else {
smallaxis_y1 = 0.5*endy1+ 0.5*smallaxis_y_factor1*(max_smallaxis_y1-endy1);
}


// calculating focus points for elliptic guide 1 x direction
tmp_w1=startx1;
tmp_w2=endx1;
tmp_b=smallaxis_x1;
tmp_L=length1;

tmp_k=cos(asin(tmp_w2/(2*tmp_b)))/cos(asin(tmp_w1/(2*tmp_b)));
tmp_L1=tmp_L/(1+tmp_k);
tmp_L2=tmp_L-tmp_L1;
tmp_c=cos(asin(tmp_w1/(2*tmp_b)))*cos(asin(tmp_w1/(2*tmp_b)));
Linx1=-tmp_L1+sqrt(tmp_L1*tmp_L1*(1/tmp_c)-tmp_b*tmp_b);
Loutx1= Linx1+tmp_L1-tmp_L2;

// calculating focus points for elliptic guide 1 y direction
tmp_w1=starty1;
tmp_w2=endy1;
tmp_b=smallaxis_y1;
tmp_L=length1;

tmp_k=cos(asin(tmp_w2/(2*tmp_b)))/cos(asin(tmp_w1/(2*tmp_b)));
tmp_L1=tmp_L/(1+tmp_k);
tmp_L2=tmp_L-tmp_L1;
tmp_c=cos(asin(tmp_w1/(2*tmp_b)))*cos(asin(tmp_w1/(2*tmp_b)));
Liny1=-tmp_L1+sqrt(tmp_L1*tmp_L1*(1/tmp_c)-tmp_b*tmp_b);
Louty1= Liny1+tmp_L1-tmp_L2;



endPoint2 = endPoint1 - length1 - u;

minlengthneeded = 0;



length2 = minlengthneeded + (endPoint2 - guide_start - minlengthneeded - length4 - length5 - minlength3 - minlength5)*lengthfrac2;


var_divreq_x_protected = var_divreq_x;
var_divreq_y_protected = var_divreq_y;

rot2 = 0;
los_logic = 1;
while(los_logic==1) {
rot2 = rot2 + 0.0002;
curve_radius2 = length2/(rot2*DEG2RAD);

var_divreq_x = var_divreq_x_protected;
var_divreq_y = var_divreq_y_protected;



endx2 = startx1;
endy2 = starty1;


startx2 = endx2;
starty2 = endy2;


endPoint3 = endPoint2 - length2 - u;

minlengthneeded = 0;

if (minlengthneeded < 1) minlengthneeded = 1;



length3 = endPoint3 - guide_start - length4 - length5;

endx3 = startx2;
endy3 = starty2;


var_divreq_x = atan(endx3*tan(var_divreq_x*DEG2RAD)/startx3)*RAD2DEG;
var_divreq_y = atan(endy3*tan(var_divreq_y*DEG2RAD)/starty3)*RAD2DEG;



if (startx3 > endx3) {
smallaxis_x3 = 0.5*startx3+ 0.5*smallaxis_x_factor3*(max_smallaxis_x3-startx3);
}
else {
smallaxis_x3 = 0.5*endx3+ 0.5*smallaxis_x_factor3*(max_smallaxis_x3-endx3);
}
if (starty3 > endy3) {
smallaxis_y3 = 0.5*starty3+ 0.5*smallaxis_y_factor3*(max_smallaxis_y3-starty3);
}
else {
smallaxis_y3 = 0.5*endy3+ 0.5*smallaxis_y_factor3*(max_smallaxis_y3-endy3);
}


// calculating focus points for elliptic guide 3 x direction
tmp_w1=startx3;
tmp_w2=endx3;
tmp_b=smallaxis_x3;
tmp_L=length3;

tmp_k=cos(asin(tmp_w2/(2*tmp_b)))/cos(asin(tmp_w1/(2*tmp_b)));
tmp_L1=tmp_L/(1+tmp_k);
tmp_L2=tmp_L-tmp_L1;
tmp_c=cos(asin(tmp_w1/(2*tmp_b)))*cos(asin(tmp_w1/(2*tmp_b)));
Linx3=-tmp_L1+sqrt(tmp_L1*tmp_L1*(1/tmp_c)-tmp_b*tmp_b);
Loutx3= Linx3+tmp_L1-tmp_L2;

// calculating focus points for elliptic guide 3 y direction
tmp_w1=starty3;
tmp_w2=endy3;
tmp_b=smallaxis_y3;
tmp_L=length3;

tmp_k=cos(asin(tmp_w2/(2*tmp_b)))/cos(asin(tmp_w1/(2*tmp_b)));
tmp_L1=tmp_L/(1+tmp_k);
tmp_L2=tmp_L-tmp_L1;
tmp_c=cos(asin(tmp_w1/(2*tmp_b)))*cos(asin(tmp_w1/(2*tmp_b)));
Liny3=-tmp_L1+sqrt(tmp_L1*tmp_L1*(1/tmp_c)-tmp_b*tmp_b);
Louty3= Liny3+tmp_L1-tmp_L2;



endPoint4 = endPoint3 - length3 - u;

endx4 = startx3;
endy4 = starty3;


startx4 = endx4 + 2*length4*tan(var_divreq_x*DEG2RAD);
starty4 = endy4 + 2*length4*tan(var_divreq_y*DEG2RAD);


endPoint5 = endPoint4 - length4 - u;

endx5 = startx4;
endy5 = starty4;


var_divreq_x = atan(endx5*tan(var_divreq_x*DEG2RAD)/startx5)*RAD2DEG;
var_divreq_y = atan(endy5*tan(var_divreq_y*DEG2RAD)/starty5)*RAD2DEG;



if (startx5 > endx5) {
smallaxis_x5 = 0.5*startx5+ 0.5*smallaxis_x_factor5*(max_smallaxis_x5-startx5);
}
else {
smallaxis_x5 = 0.5*endx5+ 0.5*smallaxis_x_factor5*(max_smallaxis_x5-endx5);
}
if (starty5 > endy5) {
smallaxis_y5 = 0.5*starty5+ 0.5*smallaxis_y_factor5*(max_smallaxis_y5-starty5);
}
else {
smallaxis_y5 = 0.5*endy5+ 0.5*smallaxis_y_factor5*(max_smallaxis_y5-endy5);
}


// calculating focus points for elliptic guide 5 x direction
tmp_w1=startx5;
tmp_w2=endx5;
tmp_b=smallaxis_x5;
tmp_L=length5;

tmp_k=cos(asin(tmp_w2/(2*tmp_b)))/cos(asin(tmp_w1/(2*tmp_b)));
tmp_L1=tmp_L/(1+tmp_k);
tmp_L2=tmp_L-tmp_L1;
tmp_c=cos(asin(tmp_w1/(2*tmp_b)))*cos(asin(tmp_w1/(2*tmp_b)));
Linx5=-tmp_L1+sqrt(tmp_L1*tmp_L1*(1/tmp_c)-tmp_b*tmp_b);
Loutx5= Linx5+tmp_L1-tmp_L2;

// calculating focus points for elliptic guide 5 y direction
tmp_w1=starty5;
tmp_w2=endy5;
tmp_b=smallaxis_y5;
tmp_L=length5;

tmp_k=cos(asin(tmp_w2/(2*tmp_b)))/cos(asin(tmp_w1/(2*tmp_b)));
tmp_L1=tmp_L/(1+tmp_k);
tmp_L2=tmp_L-tmp_L1;
tmp_c=cos(asin(tmp_w1/(2*tmp_b)))*cos(asin(tmp_w1/(2*tmp_b)));
Liny5=-tmp_L1+sqrt(tmp_L1*tmp_L1*(1/tmp_c)-tmp_b*tmp_b);
Louty5= Liny5+tmp_L1-tmp_L2;






// Temporary fake start point, for this specific los section
startXdirec[7][1] = 1.0;
startXdirec[7][2] = 0.0;
startYdirec[7][1] = 1.0;
startYdirec[7][2] = 0.0;

startXposition[7][1] = 0.0;
startXposition[7][2] = 0.0;
startYposition[7][1] = 0.0;
startYposition[7][2] = 0.0;

startXdirec[6][1] = startXdirec[7][1];
startXdirec[6][2] = startXdirec[7][2];
startYdirec[6][1] = startYdirec[7][1];
startYdirec[6][2] = startYdirec[7][2];
startXposition[6][1] = startXposition[7][1] + startXdirec[7][1]*0*length5;
startXposition[6][2] = startXposition[7][2] + startXdirec[7][2]*0*length5;
startYposition[6][1] = startYposition[7][1] + startYdirec[7][1]*0*length5;
startYposition[6][2] = startYposition[7][2] + startYdirec[7][2]*0*length5;

position = 0*length5;
focus_e = length5 + Loutx5;
elength = focus_e + Linx5;
width  = smallaxis_x5*sqrt(1-(((position+Linx5)-elength/2)/(elength/2))*(((position+Linx5)-elength/2)/(elength/2)));
focus_e = length5 + Louty5;
elength = focus_e + Liny5;
height = smallaxis_y5*sqrt(1-(((position+Liny5)-elength/2)/(elength/2))*(((position+Liny5)-elength/2)/(elength/2)));
startxpoint[6][1][1] = startXposition[6][1]+startXdirec[6][2]*width;
startxpoint[6][2][1] = startXposition[6][2]-startXdirec[6][1]*width;
startxpoint[6][1][2] = startXposition[6][1]-startXdirec[6][2]*width;
startxpoint[6][2][2] = startXposition[6][2]+startXdirec[6][1]*width;
startypoint[6][1][1] = startYposition[6][1]+startYdirec[6][2]*height;
startypoint[6][2][1] = startYposition[6][2]-startYdirec[6][1]*height;
startypoint[6][1][2] = startYposition[6][1]-startYdirec[6][2]*height;
startypoint[6][2][2] = startYposition[6][2]+startYdirec[6][1]*height;



startXdirec[5][1] = startXdirec[7][1];
startXdirec[5][2] = startXdirec[7][2];
startYdirec[5][1] = startYdirec[7][1];
startYdirec[5][2] = startYdirec[7][2];
startXposition[5][1] = startXposition[7][1] + startXdirec[7][1]*length5;
startXposition[5][2] = startXposition[7][2] + startXdirec[7][2]*length5;
startYposition[5][1] = startYposition[7][1] + startYdirec[7][1]*length5;
startYposition[5][2] = startYposition[7][2] + startYdirec[7][2]*length5;

startxpoint[5][1][1] = startXposition[5][1]+startXdirec[5][2]*0.5*startx4;
startxpoint[5][2][1] = startXposition[5][2]-startXdirec[5][1]*0.5*startx4;
startxpoint[5][1][2] = startXposition[5][1]-startXdirec[5][2]*0.5*startx4;
startxpoint[5][2][2] = startXposition[5][2]+startXdirec[5][1]*0.5*startx4;
startypoint[5][1][1] = startYposition[5][1]+startYdirec[5][2]*0.5*starty4;
startypoint[5][2][1] = startYposition[5][2]-startYdirec[5][1]*0.5*starty4;
startypoint[5][1][2] = startYposition[5][1]-startYdirec[5][2]*0.5*starty4;
startypoint[5][2][2] = startYposition[5][2]+startYdirec[5][1]*0.5*starty4;




startXdirec[4][1] = startXdirec[5][1];
startXdirec[4][2] = startXdirec[5][2];
startYdirec[4][1] = startYdirec[5][1];
startYdirec[4][2] = startYdirec[5][2];
startXposition[4][1] = startXposition[5][1] + startXdirec[5][1]*length4;
startXposition[4][2] = startXposition[5][2] + startXdirec[5][2]*length4;
startYposition[4][1] = startYposition[5][1] + startYdirec[5][1]*length4;
startYposition[4][2] = startYposition[5][2] + startYdirec[5][2]*length4;

startxpoint[4][1][1] = startXposition[4][1]+startXdirec[4][2]*0.5*startx3;
startxpoint[4][2][1] = startXposition[4][2]-startXdirec[4][1]*0.5*startx3;
startxpoint[4][1][2] = startXposition[4][1]-startXdirec[4][2]*0.5*startx3;
startxpoint[4][2][2] = startXposition[4][2]+startXdirec[4][1]*0.5*startx3;
startypoint[4][1][1] = startYposition[4][1]+startYdirec[4][2]*0.5*starty3;
startypoint[4][2][1] = startYposition[4][2]-startYdirec[4][1]*0.5*starty3;
startypoint[4][1][2] = startYposition[4][1]-startYdirec[4][2]*0.5*starty3;
startypoint[4][2][2] = startYposition[4][2]+startYdirec[4][1]*0.5*starty3;




startXdirec[3][1] = startXdirec[4][1];
startXdirec[3][2] = startXdirec[4][2];
startYdirec[3][1] = startYdirec[4][1];
startYdirec[3][2] = startYdirec[4][2];
startXposition[3][1] = startXposition[4][1] + startXdirec[4][1]*length3;
startXposition[3][2] = startXposition[4][2] + startXdirec[4][2]*length3;
startYposition[3][1] = startYposition[4][1] + startYdirec[4][1]*length3;
startYposition[3][2] = startYposition[4][2] + startYdirec[4][2]*length3;

startxpoint[3][1][1] = startXposition[3][1]+startXdirec[3][2]*0.5*startx2;
startxpoint[3][2][1] = startXposition[3][2]-startXdirec[3][1]*0.5*startx2;
startxpoint[3][1][2] = startXposition[3][1]-startXdirec[3][2]*0.5*startx2;
startxpoint[3][2][2] = startXposition[3][2]+startXdirec[3][1]*0.5*startx2;
startypoint[3][1][1] = startYposition[3][1]+startYdirec[3][2]*0.5*starty2;
startypoint[3][2][1] = startYposition[3][2]-startYdirec[3][1]*0.5*starty2;
startypoint[3][1][2] = startYposition[3][1]-startYdirec[3][2]*0.5*starty2;
startypoint[3][2][2] = startYposition[3][2]+startYdirec[3][1]*0.5*starty2;

curveXcenter2[1] = startXposition[3][1] + startXdirec[3][2] * curve_radius2;
curveXcenter2[2] = startXposition[3][2] - startXdirec[3][1] * curve_radius2;
curve_small_radius2 = curve_radius2 - 0.5*startx2;



rot_factor_g2 = 1;
cosrot3 = cos(rot2*DEG2RAD);
sinrot3 = sin(rot2*DEG2RAD);
DeltaA2 = curve_radius2*(1-cos(rot2*DEG2RAD));
DeltaB2 = curve_radius2*sin(rot2*DEG2RAD);
startXdirec[2][1] = startXdirec[3][1]*cosrot3 + startXdirec[3][2]*sinrot3;
startXdirec[2][2] = - startXdirec[3][1]*sinrot3 + startXdirec[3][2]*cosrot3;
startXposition[2][1] = startXposition[3][1] + startXdirec[3][2]*DeltaA2 + startXdirec[3][1]*DeltaB2;
startXposition[2][2] = startXposition[3][2] - startXdirec[3][1]*DeltaA2 + startXdirec[3][2]*DeltaB2;
startYdirec[2][1] = startYdirec[3][1];
startYdirec[2][2] = startYdirec[3][2];
startYposition[2][1] = startYposition[3][1] + startYdirec[3][2]*DeltaA2 + startYdirec[3][1]*DeltaB2;
startYposition[2][2] = startYposition[3][2] + startYdirec[3][2]*length2*rot_factor_g2;

startxpoint[2][1][1] = startXposition[2][1]+startXdirec[2][2]*0.5*startx1;
startxpoint[2][2][1] = startXposition[2][2]-startXdirec[2][1]*0.5*startx1;
startxpoint[2][1][2] = startXposition[2][1]-startXdirec[2][2]*0.5*startx1;
startxpoint[2][2][2] = startXposition[2][2]+startXdirec[2][1]*0.5*startx1;
startypoint[2][1][1] = startYposition[2][1]+startYdirec[2][2]*0.5*starty1;
startypoint[2][2][1] = startYposition[2][2]-startYdirec[2][1]*0.5*starty1;
startypoint[2][1][2] = startYposition[2][1]-startYdirec[2][2]*0.5*starty1;
startypoint[2][2][2] = startYposition[2][2]+startYdirec[2][1]*0.5*starty1;




startXdirec[1][1] = startXdirec[2][1];
startXdirec[1][2] = startXdirec[2][2];
startYdirec[1][1] = startYdirec[2][1];
startYdirec[1][2] = startYdirec[2][2];
startXposition[1][1] = startXposition[2][1] + startXdirec[2][1]*(length1 - 6);
startXposition[1][2] = startXposition[2][2] + startXdirec[2][2]*(length1 - 6);
startYposition[1][1] = startYposition[2][1] + startYdirec[2][1]*(length1 - 6);
startYposition[1][2] = startYposition[2][2] + startYdirec[2][2]*(length1 - 6);

position = length1 - 6;
focus_e = length1 + Loutx1;
elength = focus_e + Linx1;
width  = smallaxis_x1*sqrt(1-(((position+Linx1)-elength/2)/(elength/2))*(((position+Linx1)-elength/2)/(elength/2)));
focus_e = length1 + Louty1;
elength = focus_e + Liny1;
height = smallaxis_y1*sqrt(1-(((position+Liny1)-elength/2)/(elength/2))*(((position+Liny1)-elength/2)/(elength/2)));
startxpoint[1][1][1] = startXposition[1][1]+startXdirec[1][2]*width;
startxpoint[1][2][1] = startXposition[1][2]-startXdirec[1][1]*width;
startxpoint[1][1][2] = startXposition[1][1]-startXdirec[1][2]*width;
startxpoint[1][2][2] = startXposition[1][2]+startXdirec[1][1]*width;
startypoint[1][1][1] = startYposition[1][1]+startYdirec[1][2]*height;
startypoint[1][2][1] = startYposition[1][2]-startYdirec[1][1]*height;
startypoint[1][1][2] = startYposition[1][1]-startYdirec[1][2]*height;
startypoint[1][2][2] = startYposition[1][2]+startYdirec[1][1]*height;
startXdirec[0][1] = startXdirec[2][1];
startXdirec[0][2] = startXdirec[2][2];
startYdirec[0][1] = startYdirec[2][1];
startYdirec[0][2] = startYdirec[2][2];
startXposition[0][1] = startXposition[2][1] + startXdirec[2][1]*length1;
startXposition[0][2] = startXposition[2][2] + startXdirec[2][2]*length1;
startYposition[0][1] = startYposition[2][1] + startYdirec[2][1]*length1;
startYposition[0][2] = startYposition[2][2] + startYdirec[2][2]*length1;
startxpoint[0][1][1] = startXposition[0][1]+startXdirec[0][2]*0.5*endx1;
startxpoint[0][2][1] = startXposition[0][2]-startXdirec[0][1]*0.5*endx1;
startxpoint[0][1][2] = startXposition[0][1]-startXdirec[0][2]*0.5*endx1;
startxpoint[0][2][2] = startXposition[0][2]+startXdirec[0][1]*0.5*endx1;
startypoint[0][1][1] = startYposition[0][1]+startYdirec[0][2]*0.5*endy1;
startypoint[0][2][1] = startYposition[0][2]-startYdirec[0][1]*0.5*endy1;
startypoint[0][1][2] = startYposition[0][1]-startYdirec[0][2]*0.5*endy1;
startypoint[0][2][2] = startYposition[0][2]+startYdirec[0][1]*0.5*endy1;

los_logic = 1; // assume line of sight
for (n1=1;n1<6;++n1) {
    for (n2=n1+1;n2<7;++n2) {
        Z1[1]=startxpoint[n1][1][1];
        X1[1]=startxpoint[n1][2][1];
        Z2[1]=startxpoint[n2][1][1];
        X2[1]=startxpoint[n2][2][1];
        Z1[2]=startxpoint[n1][1][2];
        X1[2]=startxpoint[n1][2][2];
        Z2[2]=startxpoint[n2][1][2];
        X2[2]=startxpoint[n2][2][2];
        Z1[3]=startxpoint[n1][1][1];
        X1[3]=startxpoint[n1][2][1];
        Z2[3]=startxpoint[n2][1][2];
        X2[3]=startxpoint[n2][2][2];
        Z1[4]=startxpoint[n1][1][2];
        X1[4]=startxpoint[n1][2][2];
        Z2[4]=startxpoint[n2][1][1];
        X2[4]=startxpoint[n2][2][1];
        for (line=1;line<5;++line) { // 4 lines need to be checked
            tmp_double=(Z1[line]-Z2[line])/100;
            a[line]=(X1[line]-X2[line])/tmp_double;
            tmp_double=a[line]*Z1[line];
            b[line]=X1[line]-tmp_double/100;
            los_tmp[line]=1;
            for (n_check=1;n_check<7;++n_check) {
                // check if the line goes between the points
                if (n_check != n1 && n_check != n2 && ((a[line]*startxpoint[n_check][1][1])/100+b[line]<startxpoint[n_check][2][1] || (a[line]*startxpoint[n_check][1][2])/100+b[line]>startxpoint[n_check][2][2])) {
                    los_tmp[line]=0; // line of sight blocked for line l!
                }
            }
            // x1 and x2 chosen as start and end of curved section
            x1_circ = startXposition[3][1] - curveXcenter2[1];
            x2_circ = startXposition[2][1] - curveXcenter2[1];
            y1_circ = a[line]/100*startXposition[3][1] + b[line] - curveXcenter2[2];
            y2_circ = a[line]/100*startXposition[2][1] + b[line] - curveXcenter2[2];
            dx_circ = x2_circ - x1_circ;
            dy_circ = y2_circ - y1_circ;
            dr_circ = sqrt(dx_circ*dx_circ + dy_circ*dy_circ);
            D_circ = x1_circ*y2_circ - y1_circ*x2_circ;
            if (dy_circ >= 0)
              sign_dy = 1;
            else
              sign_dy = -1;
            k_circ = curve_small_radius2*curve_small_radius2* dr_circ * dr_circ - D_circ*D_circ;

            if (k_circ > 0){
             x_solution[0] = (D_circ*dy_circ + sign_dy*dx_circ*sqrt(k_circ))/(dr_circ*dr_circ);
             x_solution[1] = (D_circ*dy_circ - sign_dy*dx_circ*sqrt(k_circ))/(dr_circ*dr_circ);
             y_solution[0] = (-D_circ*dx_circ + fabs(dy_circ)*sqrt(k_circ))/(dr_circ*dr_circ);
             y_solution[1] = (-D_circ*dx_circ - fabs(dy_circ)*sqrt(k_circ))/(dr_circ*dr_circ);

             for (ii=0;ii<2;++ii) {
              if (x_solution[ii] > x1_circ && x_solution[ii] < x2_circ) {
                  los_tmp[line]=0; // line of sight blocked for line l!
              }
             }
            }
        }
        if (los_tmp[1]+los_tmp[2]+los_tmp[3]+los_tmp[4]==0) {
            los_logic_single[n1][n2]=0;
        }
        else {
            los_logic_single[n1][n2]=1;
        }
    }
}
los_check=0;
for (n1=1;n1<6;++n1) {
    for (n2=n1+1;n2<7;++n2) {
        los_check=los_check+los_logic_single[n1][n2];
    }
}
if (los_check==0) {
    los_logic = 0;
}
}







startXdirec[7][1] = 1.0;
startXdirec[7][2] = 0.0;
startYdirec[7][1] = 1.0;
startYdirec[7][2] = 0.0;

startXposition[7][1] = endPoint5 - length5;
startXposition[7][2] = 0.0;
startYposition[7][1] = endPoint5 - length5;
startYposition[7][2] = 0.0;

startxpoint[7][1][1] = startXposition[7][1]+startXdirec[7][2]*0.5*startx5;
startxpoint[7][2][1] = startXposition[7][2]-startXdirec[7][1]*0.5*startx5;
startxpoint[7][1][2] = startXposition[7][1]-startXdirec[7][2]*0.5*startx5;
startxpoint[7][2][2] = startXposition[7][2]+startXdirec[7][1]*0.5*startx5;
startypoint[7][1][1] = startYposition[7][1]+startYdirec[7][2]*0.5*starty5;
startypoint[7][2][1] = startYposition[7][2]-startYdirec[7][1]*0.5*starty5;
startypoint[7][1][2] = startYposition[7][1]-startYdirec[7][2]*0.5*starty5;
startypoint[7][2][2] = startYposition[7][2]+startYdirec[7][1]*0.5*starty5;




startXdirec[6][1] = startXdirec[7][1];
startXdirec[6][2] = startXdirec[7][2];
startYdirec[6][1] = startYdirec[7][1];
startYdirec[6][2] = startYdirec[7][2];
startXposition[6][1] = startXposition[7][1] + startXdirec[7][1]*0*length5;
startXposition[6][2] = startXposition[7][2] + startXdirec[7][2]*0*length5;
startYposition[6][1] = startYposition[7][1] + startYdirec[7][1]*0*length5;
startYposition[6][2] = startYposition[7][2] + startYdirec[7][2]*0*length5;

position = 0*length5;
focus_e = length5 + Loutx5;
elength = focus_e + Linx5;
width  = smallaxis_x5*sqrt(1-(((position+Linx5)-elength/2)/(elength/2))*(((position+Linx5)-elength/2)/(elength/2)));
focus_e = length5 + Louty5;
elength = focus_e + Liny5;
height = smallaxis_y5*sqrt(1-(((position+Liny5)-elength/2)/(elength/2))*(((position+Liny5)-elength/2)/(elength/2)));
startxpoint[6][1][1] = startXposition[6][1]+startXdirec[6][2]*width;
startxpoint[6][2][1] = startXposition[6][2]-startXdirec[6][1]*width;
startxpoint[6][1][2] = startXposition[6][1]-startXdirec[6][2]*width;
startxpoint[6][2][2] = startXposition[6][2]+startXdirec[6][1]*width;
startypoint[6][1][1] = startYposition[6][1]+startYdirec[6][2]*height;
startypoint[6][2][1] = startYposition[6][2]-startYdirec[6][1]*height;
startypoint[6][1][2] = startYposition[6][1]-startYdirec[6][2]*height;
startypoint[6][2][2] = startYposition[6][2]+startYdirec[6][1]*height;



startXdirec[5][1] = startXdirec[7][1];
startXdirec[5][2] = startXdirec[7][2];
startYdirec[5][1] = startYdirec[7][1];
startYdirec[5][2] = startYdirec[7][2];
startXposition[5][1] = startXposition[7][1] + startXdirec[7][1]*length5;
startXposition[5][2] = startXposition[7][2] + startXdirec[7][2]*length5;
startYposition[5][1] = startYposition[7][1] + startYdirec[7][1]*length5;
startYposition[5][2] = startYposition[7][2] + startYdirec[7][2]*length5;

startxpoint[5][1][1] = startXposition[5][1]+startXdirec[5][2]*0.5*startx4;
startxpoint[5][2][1] = startXposition[5][2]-startXdirec[5][1]*0.5*startx4;
startxpoint[5][1][2] = startXposition[5][1]-startXdirec[5][2]*0.5*startx4;
startxpoint[5][2][2] = startXposition[5][2]+startXdirec[5][1]*0.5*startx4;
startypoint[5][1][1] = startYposition[5][1]+startYdirec[5][2]*0.5*starty4;
startypoint[5][2][1] = startYposition[5][2]-startYdirec[5][1]*0.5*starty4;
startypoint[5][1][2] = startYposition[5][1]-startYdirec[5][2]*0.5*starty4;
startypoint[5][2][2] = startYposition[5][2]+startYdirec[5][1]*0.5*starty4;




startXdirec[4][1] = startXdirec[5][1];
startXdirec[4][2] = startXdirec[5][2];
startYdirec[4][1] = startYdirec[5][1];
startYdirec[4][2] = startYdirec[5][2];
startXposition[4][1] = startXposition[5][1] + startXdirec[5][1]*length4;
startXposition[4][2] = startXposition[5][2] + startXdirec[5][2]*length4;
startYposition[4][1] = startYposition[5][1] + startYdirec[5][1]*length4;
startYposition[4][2] = startYposition[5][2] + startYdirec[5][2]*length4;

startxpoint[4][1][1] = startXposition[4][1]+startXdirec[4][2]*0.5*startx3;
startxpoint[4][2][1] = startXposition[4][2]-startXdirec[4][1]*0.5*startx3;
startxpoint[4][1][2] = startXposition[4][1]-startXdirec[4][2]*0.5*startx3;
startxpoint[4][2][2] = startXposition[4][2]+startXdirec[4][1]*0.5*startx3;
startypoint[4][1][1] = startYposition[4][1]+startYdirec[4][2]*0.5*starty3;
startypoint[4][2][1] = startYposition[4][2]-startYdirec[4][1]*0.5*starty3;
startypoint[4][1][2] = startYposition[4][1]-startYdirec[4][2]*0.5*starty3;
startypoint[4][2][2] = startYposition[4][2]+startYdirec[4][1]*0.5*starty3;




startXdirec[3][1] = startXdirec[4][1];
startXdirec[3][2] = startXdirec[4][2];
startYdirec[3][1] = startYdirec[4][1];
startYdirec[3][2] = startYdirec[4][2];
startXposition[3][1] = startXposition[4][1] + startXdirec[4][1]*length3;
startXposition[3][2] = startXposition[4][2] + startXdirec[4][2]*length3;
startYposition[3][1] = startYposition[4][1] + startYdirec[4][1]*length3;
startYposition[3][2] = startYposition[4][2] + startYdirec[4][2]*length3;

startxpoint[3][1][1] = startXposition[3][1]+startXdirec[3][2]*0.5*startx2;
startxpoint[3][2][1] = startXposition[3][2]-startXdirec[3][1]*0.5*startx2;
startxpoint[3][1][2] = startXposition[3][1]-startXdirec[3][2]*0.5*startx2;
startxpoint[3][2][2] = startXposition[3][2]+startXdirec[3][1]*0.5*startx2;
startypoint[3][1][1] = startYposition[3][1]+startYdirec[3][2]*0.5*starty2;
startypoint[3][2][1] = startYposition[3][2]-startYdirec[3][1]*0.5*starty2;
startypoint[3][1][2] = startYposition[3][1]-startYdirec[3][2]*0.5*starty2;
startypoint[3][2][2] = startYposition[3][2]+startYdirec[3][1]*0.5*starty2;

curveXcenter2[1] = startXposition[3][1] + startXdirec[3][2] * curve_radius2;
curveXcenter2[2] = startXposition[3][2] - startXdirec[3][1] * curve_radius2;
curve_small_radius2 = curve_radius2 - 0.5*startx2;



rot_factor_g2 = 1;
cosrot3 = cos(rot2*DEG2RAD);
sinrot3 = sin(rot2*DEG2RAD);
DeltaA2 = curve_radius2*(1-cos(rot2*DEG2RAD));
DeltaB2 = curve_radius2*sin(rot2*DEG2RAD);
startXdirec[2][1] = startXdirec[3][1]*cosrot3 + startXdirec[3][2]*sinrot3;
startXdirec[2][2] = - startXdirec[3][1]*sinrot3 + startXdirec[3][2]*cosrot3;
startXposition[2][1] = startXposition[3][1] + startXdirec[3][2]*DeltaA2 + startXdirec[3][1]*DeltaB2;
startXposition[2][2] = startXposition[3][2] - startXdirec[3][1]*DeltaA2 + startXdirec[3][2]*DeltaB2;
startYdirec[2][1] = startYdirec[3][1];
startYdirec[2][2] = startYdirec[3][2];
startYposition[2][1] = startYposition[3][1] + startYdirec[3][2]*DeltaA2 + startYdirec[3][1]*DeltaB2;
startYposition[2][2] = startYposition[3][2] + startYdirec[3][2]*length2*rot_factor_g2;

startxpoint[2][1][1] = startXposition[2][1]+startXdirec[2][2]*0.5*startx1;
startxpoint[2][2][1] = startXposition[2][2]-startXdirec[2][1]*0.5*startx1;
startxpoint[2][1][2] = startXposition[2][1]-startXdirec[2][2]*0.5*startx1;
startxpoint[2][2][2] = startXposition[2][2]+startXdirec[2][1]*0.5*startx1;
startypoint[2][1][1] = startYposition[2][1]+startYdirec[2][2]*0.5*starty1;
startypoint[2][2][1] = startYposition[2][2]-startYdirec[2][1]*0.5*starty1;
startypoint[2][1][2] = startYposition[2][1]-startYdirec[2][2]*0.5*starty1;
startypoint[2][2][2] = startYposition[2][2]+startYdirec[2][1]*0.5*starty1;




startXdirec[1][1] = startXdirec[2][1];
startXdirec[1][2] = startXdirec[2][2];
startYdirec[1][1] = startYdirec[2][1];
startYdirec[1][2] = startYdirec[2][2];
startXposition[1][1] = startXposition[2][1] + startXdirec[2][1]*(length1 - 6);
startXposition[1][2] = startXposition[2][2] + startXdirec[2][2]*(length1 - 6);
startYposition[1][1] = startYposition[2][1] + startYdirec[2][1]*(length1 - 6);
startYposition[1][2] = startYposition[2][2] + startYdirec[2][2]*(length1 - 6);

position = length1 - 6;
focus_e = length1 + Loutx1;
elength = focus_e + Linx1;
width  = smallaxis_x1*sqrt(1-(((position+Linx1)-elength/2)/(elength/2))*(((position+Linx1)-elength/2)/(elength/2)));
focus_e = length1 + Louty1;
elength = focus_e + Liny1;
height = smallaxis_y1*sqrt(1-(((position+Liny1)-elength/2)/(elength/2))*(((position+Liny1)-elength/2)/(elength/2)));
startxpoint[1][1][1] = startXposition[1][1]+startXdirec[1][2]*width;
startxpoint[1][2][1] = startXposition[1][2]-startXdirec[1][1]*width;
startxpoint[1][1][2] = startXposition[1][1]-startXdirec[1][2]*width;
startxpoint[1][2][2] = startXposition[1][2]+startXdirec[1][1]*width;
startypoint[1][1][1] = startYposition[1][1]+startYdirec[1][2]*height;
startypoint[1][2][1] = startYposition[1][2]-startYdirec[1][1]*height;
startypoint[1][1][2] = startYposition[1][1]-startYdirec[1][2]*height;
startypoint[1][2][2] = startYposition[1][2]+startYdirec[1][1]*height;
startXdirec[0][1] = startXdirec[2][1];
startXdirec[0][2] = startXdirec[2][2];
startYdirec[0][1] = startYdirec[2][1];
startYdirec[0][2] = startYdirec[2][2];
startXposition[0][1] = startXposition[2][1] + startXdirec[2][1]*length1;
startXposition[0][2] = startXposition[2][2] + startXdirec[2][2]*length1;
startYposition[0][1] = startYposition[2][1] + startYdirec[2][1]*length1;
startYposition[0][2] = startYposition[2][2] + startYdirec[2][2]*length1;
startxpoint[0][1][1] = startXposition[0][1]+startXdirec[0][2]*0.5*endx1;
startxpoint[0][2][1] = startXposition[0][2]-startXdirec[0][1]*0.5*endx1;
startxpoint[0][1][2] = startXposition[0][1]-startXdirec[0][2]*0.5*endx1;
startxpoint[0][2][2] = startXposition[0][2]+startXdirec[0][1]*0.5*endx1;
startypoint[0][1][1] = startYposition[0][1]+startYdirec[0][2]*0.5*endy1;
startypoint[0][2][1] = startYposition[0][2]-startYdirec[0][1]*0.5*endy1;
startypoint[0][1][2] = startYposition[0][1]-startYdirec[0][2]*0.5*endy1;
startypoint[0][2][2] = startYposition[0][2]+startYdirec[0][1]*0.5*endy1;


fp = fopen(file_name,"w");

fprintf(fp,"E\n");
fprintf(fp,"x1: %lf \t %lf \t %lf \t %lf\n",startxpoint[7][1][1],startxpoint[7][2][1],startxpoint[7][1][2],startxpoint[7][2][2]);
fprintf(fp,"x2: %lf \t %lf \t %lf \t %lf\n",startxpoint[6][1][1],startxpoint[6][2][1],startxpoint[6][1][2],startxpoint[6][2][2]);
fprintf(fp,"y1: %lf \t %lf \t %lf \t %lf\n",startypoint[7][1][1],startypoint[7][2][1],startypoint[7][1][2],startypoint[7][2][2]);
fprintf(fp,"y2: %lf \t %lf \t %lf \t %lf\n",startypoint[6][1][1],startypoint[6][2][1],startypoint[6][1][2],startypoint[6][2][2]);
fprintf(fp,"xpos: %lf \t %lf\n",startXposition[7][1],startXposition[7][2]);
fprintf(fp,"ypos: %lf \t %lf\n",startYposition[7][1],startYposition[7][2]);
fprintf(fp,"xdir: %lf \t %lf\n",startXdirec[7][1],startXdirec[7][2]);
fprintf(fp,"ydir: %lf \t %lf\n",startYdirec[7][1],startYdirec[7][2]);
fprintf(fp,"xpars: %lf \t %lf \t %lf \t %lf\n",length5,smallaxis_x5,Linx5,Loutx5);
fprintf(fp,"ypars: %lf \t %lf \t %lf \t %lf\n",length5,smallaxis_y5,Liny5,Louty5);

fprintf(fp,"E\n");
fprintf(fp,"x1: %lf \t %lf \t %lf \t %lf\n",startxpoint[6][1][1],startxpoint[6][2][1],startxpoint[6][1][2],startxpoint[6][2][2]);
fprintf(fp,"x2: %lf \t %lf \t %lf \t %lf\n",startxpoint[5][1][1],startxpoint[5][2][1],startxpoint[5][1][2],startxpoint[5][2][2]);
fprintf(fp,"y1: %lf \t %lf \t %lf \t %lf\n",startypoint[6][1][1],startypoint[6][2][1],startypoint[6][1][2],startypoint[6][2][2]);
fprintf(fp,"y2: %lf \t %lf \t %lf \t %lf\n",startypoint[5][1][1],startypoint[5][2][1],startypoint[5][1][2],startypoint[5][2][2]);
fprintf(fp,"xpos: %lf \t %lf\n",startXposition[6][1],startXposition[6][2]);
fprintf(fp,"ypos: %lf \t %lf\n",startYposition[6][1],startYposition[6][2]);
fprintf(fp,"xdir: %lf \t %lf\n",startXdirec[6][1],startXdirec[6][2]);
fprintf(fp,"ydir: %lf \t %lf\n",startYdirec[6][1],startYdirec[6][2]);
fprintf(fp,"xpars: %lf \t %lf \t %lf \t %lf\n",length5,smallaxis_x5,Linx5,Loutx5);
fprintf(fp,"ypars: %lf \t %lf \t %lf \t %lf\n",length5,smallaxis_y5,Liny5,Louty5);
fprintf(fp,"Los s\n");

fprintf(fp,"G\n");
fprintf(fp,"x1: %lf \t %lf \t %lf \t %lf\n",startxpoint[5][1][1],startxpoint[5][2][1],startxpoint[5][1][2],startxpoint[5][2][2]);
fprintf(fp,"x2: %lf \t %lf \t %lf \t %lf\n",startxpoint[4][1][1],startxpoint[4][2][1],startxpoint[4][1][2],startxpoint[4][2][2]);
fprintf(fp,"y1: %lf \t %lf \t %lf \t %lf\n",startypoint[5][1][1],startypoint[5][2][1],startypoint[5][1][2],startypoint[5][2][2]);
fprintf(fp,"y2: %lf \t %lf \t %lf \t %lf\n",startypoint[4][1][1],startypoint[4][2][1],startypoint[4][1][2],startypoint[4][2][2]);

fprintf(fp,"E\n");
fprintf(fp,"x1: %lf \t %lf \t %lf \t %lf\n",startxpoint[4][1][1],startxpoint[4][2][1],startxpoint[4][1][2],startxpoint[4][2][2]);
fprintf(fp,"x2: %lf \t %lf \t %lf \t %lf\n",startxpoint[3][1][1],startxpoint[3][2][1],startxpoint[3][1][2],startxpoint[3][2][2]);
fprintf(fp,"y1: %lf \t %lf \t %lf \t %lf\n",startypoint[4][1][1],startypoint[4][2][1],startypoint[4][1][2],startypoint[4][2][2]);
fprintf(fp,"y2: %lf \t %lf \t %lf \t %lf\n",startypoint[3][1][1],startypoint[3][2][1],startypoint[3][1][2],startypoint[3][2][2]);
fprintf(fp,"xpos: %lf \t %lf\n",startXposition[4][1],startXposition[4][2]);
fprintf(fp,"ypos: %lf \t %lf\n",startYposition[4][1],startYposition[4][2]);
fprintf(fp,"xdir: %lf \t %lf\n",startXdirec[4][1],startXdirec[4][2]);
fprintf(fp,"ydir: %lf \t %lf\n",startYdirec[4][1],startYdirec[4][2]);
fprintf(fp,"xpars: %lf \t %lf \t %lf \t %lf\n",length3,smallaxis_x3,Linx3,Loutx3);
fprintf(fp,"ypars: %lf \t %lf \t %lf \t %lf\n",length3,smallaxis_y3,Liny3,Louty3);

fprintf(fp,"C\n");
fprintf(fp,"x1: %lf \t %lf \t %lf \t %lf\n",startxpoint[3][1][1],startxpoint[3][2][1],startxpoint[3][1][2],startxpoint[3][2][2]);
fprintf(fp,"x2: %lf \t %lf \t %lf \t %lf\n",startxpoint[2][1][1],startxpoint[2][2][1],startxpoint[2][1][2],startxpoint[2][2][2]);
fprintf(fp,"y1: %lf \t %lf \t %lf \t %lf\n",startypoint[3][1][1],startypoint[3][2][1],startypoint[3][1][2],startypoint[3][2][2]);
fprintf(fp,"y2: %lf \t %lf \t %lf \t %lf\n",startypoint[2][1][1],startypoint[2][2][1],startypoint[2][1][2],startypoint[2][2][2]);
fprintf(fp,"x: %lf \t %lf \t %lf \t %lf \t %lf\n",curve_radius2,curve_small_radius2,curveXcenter2[1],curveXcenter2[2],channels2);

fprintf(fp,"E\n");
fprintf(fp,"x1: %lf \t %lf \t %lf \t %lf\n",startxpoint[2][1][1],startxpoint[2][2][1],startxpoint[2][1][2],startxpoint[2][2][2]);
fprintf(fp,"x2: %lf \t %lf \t %lf \t %lf\n",startxpoint[1][1][1],startxpoint[1][2][1],startxpoint[1][1][2],startxpoint[1][2][2]);
fprintf(fp,"y1: %lf \t %lf \t %lf \t %lf\n",startypoint[2][1][1],startypoint[2][2][1],startypoint[2][1][2],startypoint[2][2][2]);
fprintf(fp,"y2: %lf \t %lf \t %lf \t %lf\n",startypoint[1][1][1],startypoint[1][2][1],startypoint[1][1][2],startypoint[1][2][2]);
fprintf(fp,"xpos: %lf \t %lf\n",startXposition[2][1],startXposition[2][2]);
fprintf(fp,"ypos: %lf \t %lf\n",startYposition[2][1],startYposition[2][2]);
fprintf(fp,"xdir: %lf \t %lf\n",startXdirec[2][1],startXdirec[2][2]);
fprintf(fp,"ydir: %lf \t %lf\n",startYdirec[2][1],startYdirec[2][2]);
fprintf(fp,"xpars: %lf \t %lf \t %lf \t %lf\n",length1,smallaxis_x1,Linx1,Loutx1);
fprintf(fp,"ypars: %lf \t %lf \t %lf \t %lf\n",length1,smallaxis_y1,Liny1,Louty1);

fprintf(fp,"E\n");
fprintf(fp,"x1: %lf \t %lf \t %lf \t %lf\n",startxpoint[1][1][1],startxpoint[1][2][1],startxpoint[1][1][2],startxpoint[1][2][2]);
fprintf(fp,"x2: %lf \t %lf \t %lf \t %lf\n",startxpoint[0][1][1],startxpoint[0][2][1],startxpoint[0][1][2],startxpoint[0][2][2]);
fprintf(fp,"y1: %lf \t %lf \t %lf \t %lf\n",startypoint[1][1][1],startypoint[1][2][1],startypoint[1][1][2],startypoint[1][2][2]);
fprintf(fp,"y2: %lf \t %lf \t %lf \t %lf\n",startypoint[0][1][1],startypoint[0][2][1],startypoint[0][1][2],startypoint[0][2][2]);
fprintf(fp,"xpos: %lf \t %lf\n",startXposition[1][1],startXposition[1][2]);
fprintf(fp,"ypos: %lf \t %lf\n",startYposition[1][1],startYposition[1][2]);
fprintf(fp,"xdir: %lf \t %lf\n",startXdirec[1][1],startXdirec[1][2]);
fprintf(fp,"ydir: %lf \t %lf\n",startYdirec[1][1],startYdirec[1][2]);
fprintf(fp,"xpars: %lf \t %lf \t %lf \t %lf\n",length1,smallaxis_x1,Linx1,Loutx1);
fprintf(fp,"ypars: %lf \t %lf \t %lf \t %lf\n",length1,smallaxis_y1,Liny1,Louty1);
fprintf(fp,"Los e\n");
fprintf(fp,"Sample\n");
fprintf(fp,"%lf \t %lf \t %lf\n",sizeX,sizeY,sample_dist);
fprintf(fp,"xp: %lf \t %lf\n",startXposition[0][1],startXposition[0][2]);
fprintf(fp,"yp: %lf \t %lf\n",startYposition[0][1],startYposition[0][2]);
fprintf(fp,"xd: %lf \t %lf\n",startXdirec[0][1],startXdirec[0][2]);
fprintf(fp,"yd: %lf \t %lf\n",startYdirec[0][1],startYdirec[0][2]);
fprintf(fp,"Moderator\n");
fprintf(fp,"%lf \t %lf\n",mod_x,mod_y);
fclose(fp);

double BE_THICK = 0.12; // Originally from Secondary Spectrometer
int COARSE = 1;
// Filter length*/
OUTFILTER_THICK = BE_THICK/0.05;


// Coarse collimator 
if (COARSE) {coarse = 1;}
else {coarse = 0;}


//Pixel start
pixelstart[0]=96;
pixelstart[1]=205;
pixelstart[2]=312;
pixelstart[3]=418;
pixelstart[4]=525;
pixelstart[5]=632;
pixelstart[6]=741;
pixelstart[7]=851;

pixelstop[0]=178;
pixelstop[1]=285;
pixelstop[2]=392;
pixelstop[3]=498;
pixelstop[4]=605;
pixelstop[5]=713;
pixelstop[6]=823;
pixelstop[7]=935;


// Analyzer positions
z_an1[1]=0.9115;
z_an1[2]=0.9209;
z_an1[3]=0.9300;
z_an1[4]=0.9388;
z_an1[5]=0.9474;
y_an1[1]=-0.0275;
y_an1[2]=-0.0140;
y_an1[3]=0.0000;
y_an1[4]=0.0145;
y_an1[5]=0.0297;
thet_an1[1]=47.17;
thet_an1[2]=48.03;
thet_an1[3]=48.90;
thet_an1[4]=49.79;
thet_an1[5]=50.69;
ana_l[1]=0.0720;
Ana1=0;

z_an2[1]=0.9744;
z_an2[2]=0.9843;
z_an2[3]=0.9939;
z_an2[4]=1.0033;
z_an2[5]=1.0123;
y_an2[1]=-0.0290;
y_an2[2]=-0.0148;
y_an2[3]=0.0000;
y_an2[4]=0.0153;
y_an2[5]=0.0312;
thet_an2[1]=45.51;
thet_an2[2]=46.35;
thet_an2[3]=47.21;
thet_an2[4]=48.09;
thet_an2[5]=48.98;
ana_l[2]=0.082;
Ana2=0;

z_an3[1]=1.0354;
z_an3[2]=1.0462;
z_an3[3]=1.0569;
z_an3[4]=1.0671;
z_an3[5]=1.0771;
y_an3[1]=-0.0311;
y_an3[2]=-0.0160;
y_an3[3]=0.0000;
y_an3[4]=0.0165;
y_an3[5]=0.0338;
thet_an3[1]=43.81;
thet_an3[2]=44.65;
thet_an3[3]=45.53;
thet_an3[4]=46.41;
thet_an3[5]=47.32;
ana_l[3]=0.092;
Ana3=0;

z_an4[1]=1.0959;
z_an4[2]=1.1078;
z_an4[3]=1.1195;
z_an4[4]=1.1309;
z_an4[5]=1.1420;
y_an4[1]=-0.0332;
y_an4[2]=-0.0170;
y_an4[3]=0.0000;
y_an4[4]=0.0177;
y_an4[5]=0.0362;
thet_an4[1]=42.11;
thet_an4[2]=42.96;
thet_an4[3]=43.84;
thet_an4[4]=44.74;
thet_an4[5]=45.66;
ana_l[4]=0.103;
Ana4=0;

z_an5[1]=1.1567;
z_an5[2]=1.1697;
z_an5[3]=1.1827;
z_an5[4]=1.1953;
z_an5[5]=1.2076;
y_an5[1]=-0.0350;
y_an5[2]=-0.0180;
y_an5[3]=0.0000;
y_an5[4]=0.0187;
y_an5[5]=0.0382;
thet_an5[1]=40.42;
thet_an5[2]=41.27;
thet_an5[3]=42.16;
thet_an5[4]=43.05;
thet_an5[5]=43.97;
ana_l[5]=0.113;
Ana5=0;

z_an6[1]=1.2170;
z_an6[2]=1.2313;
z_an6[3]=1.2456;
z_an6[4]=1.2595;
z_an6[5]=1.2732;
y_an6[1]=-0.0365;
y_an6[2]=-0.0188;
y_an6[3]=0.0000;
y_an6[4]=0.0195;
y_an6[5]=0.0402;
thet_an6[1]=38.75;
thet_an6[2]=39.60;
thet_an6[3]=40.47;
thet_an6[4]=41.36;
thet_an6[5]=42.28;
ana_l[6]=0.120;
Ana6=0;

z_an7[1]=1.2775;
z_an7[2]=1.2936;
z_an7[3]=1.3098;
z_an7[4]=1.3256;
z_an7[5]=1.3413;
y_an7[1]=-0.0389;
y_an7[2]=-0.0201;
y_an7[3]=0.0000;
y_an7[4]=0.0209;
y_an7[5]=0.0431;
thet_an7[1]=37.04;
thet_an7[2]=37.90;
thet_an7[3]=38.79;
thet_an7[4]=39.69;
thet_an7[5]=40.63;
ana_l[7]=0.129;
Ana7=0;

z_an8[1]=1.3385;
z_an8[2]=1.3565;
z_an8[3]=1.3747;
z_an8[4]=1.3925;
z_an8[5]=1.4102;
y_an8[1]=-0.0409;
y_an8[2]=-0.0212;
y_an8[3]=0.0000;
y_an8[4]=0.0221;
y_an8[5]=0.0456;
thet_an8[1]=35.35;
thet_an8[2]=36.21;
thet_an8[3]=37.10;
thet_an8[4]=38.01;
thet_an8[5]=38.95;
ana_l[8]=0.140;
Ana8=0;

ana_l[1]=ana_l[1]+ana_l_add;
ana_l[2]=ana_l[2]+ana_l_add;
ana_l[3]=ana_l[3]+ana_l_add;
ana_l[4]=ana_l[4]+ana_l_add;
ana_l[5]=ana_l[5]+ana_l_add;
ana_l[6]=ana_l[6]+ana_l_add;
ana_l[7]=ana_l[7]+ana_l_add;
ana_l[8]=ana_l[8]+ana_l_add;


// Detector positions rotation given in degrees

ang_1[0]=-3.33;
ang_1[1]=-2.22;
ang_1[2]=-1.11;
ang_1[3]=0;
ang_1[4]=1.11;
ang_1[5]=2.22;
ang_1[6]=3.33;

ang_2[0]=-2.775;
ang_2[1]=-1.665;
ang_2[2]=-0.555;
ang_2[3]=0.555;
ang_2[4]=1.665;
ang_2[5]=2.775;

dety_1=0.7; //
dety_2=0.71; //
det_cen=DET_cen;

A3_val = A3;//*3.141592/180.0;

A4_val = A4;//*3.141592/180.0;
//sourceDivergence = source_DivH;

for (i=0; i<7; i++){
	detx_1[i] = -sin(ang_1[i]*PI/180)*det_cen;
	detz_1[i] = cos(ang_1[i]*PI/180)*det_cen;
}

for (i=0; i<6; i++){
	detx_2[i] = -sin(ang_2[i]*PI/180)*det_cen;
	detz_2[i] = cos(ang_2[i]*PI/180)*det_cen;
}


RV_mono = 2*1.6*sin(DEG2RAD*thetaA1)*RV_mono_Bool;
RH_mono = 2*1.6/sin(DEG2RAD*thetaA1)*RH_mono_Bool;

%}
TRACE
COMPONENT Origin = Progress_bar()
 AT (0,0,0) ABSOLUTE


/********************************************************************************************/
/*COMPONENT source = Source_gen4 (
    h = 0.135, w = 0.03, xw = 0.035, yh = 0.12,
//    dist = 10.465, 
//    E0= 4.1, dE = 1.9,
/*    dist = 1.601, 
    Lmin=lmin, Lmax=lmax, 
    T1=301.287, I1=(1.27e13/4/PI),
    T2=105.655,I2=(3.818e12/4/PI),
    T3=25.379,I3=(2.331e12/4/PI),
    HEtailA=8.306e11/4/PI, HEtailL0=-0.398)
 AT (0,0,0) RELATIVE Origin 
/********************************************************************************************/
COMPONENT source_simple = Source_simple(
    radius=0, 
    yheight=slitheight, 
    xwidth=0.03, 
    dist=1.601, 
    focus_xw=0.289, 
    focus_yh=0.187, 
    E0=4.1, 
    dE=1.1)
AT (0, 0, 0) RELATIVE Origin


COMPONENT SlitGuideEnd = Slit(
    xwidth = slitwidth, yheight = slitheight)
  AT (0, 0, virtual_slit_d) RELATIVE Origin

COMPONENT e_monitor_source = E_monitor(
    nE=200, 
    filename="e_mon_source", 
    xwidth=0.03, 
    yheight=slitheight, 
    Emin=2.7, 
    Emax=5.5)
AT (0, 0, 0.001) RELATIVE PREVIOUS


COMPONENT MonoFLat = Monochromator_curved(
    zwidth = 0.05, yheight = 0.025, gap = 0.0005, NH =3,
    NV = 5, DM=3.355, mosaich = 37, mosaicv = 37, r0 = 1, RV = RV_mono, RH = 0)
WHEN(old_mono==1)  AT (0, 0, 1.6) RELATIVE SlitGuideEnd
  ROTATED (0, thetaA1,0) RELATIVE SlitGuideEnd


COMPONENT Mono = Monochromator_curved(
    zwidth = 0.015, yheight = 0.015, gap = 0.002, NH =17,
    NV = 11, DM=3.355, mosaich = 42, mosaicv = 42, r0 = 1, RV = RV_mono, RH = RH_mono)
WHEN(old_mono==0)  AT (0, 0, 1.6) RELATIVE SlitGuideEnd
  ROTATED (0, thetaA1,0) RELATIVE SlitGuideEnd


COMPONENT A2 = Arm(
    )
  AT (0, 0, 1.6) RELATIVE SlitGuideEnd
  ROTATED (0, thetaA2, 0) RELATIVE SlitGuideEnd


COMPONENT slit = Slit(
    xmin=-0.005, 
    xmax=0.005, 
    ymin=-0.005, 
    ymax=0.005)
AT (0, 0, 1.5) RELATIVE A2

COMPONENT SlitMonitor = PSD_monitor(
    nx=100, 
    ny=100, 
    filename="SlitMonitor.dat", 
    xmin=-0.01, 
    xmax=0.01, 
    ymin=-0.01, 
    ymax=0.01, 
    restore_neutron=1)
AT (0, 0, 0.001) RELATIVE PREVIOUS


COMPONENT SamplePos = Arm() // Change to actual sample
AT (0, 0, 1.6) RELATIVE A2

COMPONENT psd_monitor = PSD_monitor(
    nx=101, 
    ny=101, 
    filename="psd_sampel_pos", 
    xwidth=2*sampleRadius, 
    yheight=sampleHeight, 
    restore_neutron=1)
AT (0, 0, 0) RELATIVE SamplePos

COMPONENT e_monitor = E_monitor(
    nE=200, 
    filename="e_mon_sample", 
    xwidth=2*sampleRadius, 
    yheight=sampleHeight, 
    Emin=3.1, 
    Emax=5.1)
AT (0, 0, 0.001) RELATIVE PREVIOUS

FINALLY
%{
%}

END
